// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: stream.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//messages structs
type Request1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Request1) Reset() {
	*x = Request1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request1) ProtoMessage() {}

func (x *Request1) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request1.ProtoReflect.Descriptor instead.
func (*Request1) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{0}
}

func (x *Request1) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type Request2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Request2) Reset() {
	*x = Request2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request2) ProtoMessage() {}

func (x *Request2) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request2.ProtoReflect.Descriptor instead.
func (*Request2) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Request2) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type Request3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Request3) Reset() {
	*x = Request3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request3) ProtoMessage() {}

func (x *Request3) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request3.ProtoReflect.Descriptor instead.
func (*Request3) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{2}
}

func (x *Request3) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message1 string `protobuf:"bytes,1,opt,name=message1,proto3" json:"message1,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetMessage1() string {
	if x != nil {
		return x.Message1
	}
	return ""
}

//deserialize structs
type StructRequest1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modification   string `protobuf:"bytes,1,opt,name=modification,proto3" json:"modification,omitempty"`
	ModFamily      string `protobuf:"bytes,2,opt,name=mod_family,json=modFamily,proto3" json:"mod_family,omitempty"`
	ModBodyType    string `protobuf:"bytes,3,opt,name=mod_body_type,json=modBodyType,proto3" json:"mod_body_type,omitempty"`
	ModEngine      string `protobuf:"bytes,4,opt,name=mod_engine,json=modEngine,proto3" json:"mod_engine,omitempty"`
	ModBase        string `protobuf:"bytes,5,opt,name=mod_base,json=modBase,proto3" json:"mod_base,omitempty"`
	UrlMod         string `protobuf:"bytes,6,opt,name=url_mod,json=urlMod,proto3" json:"url_mod,omitempty"`
	ClientidGoogle string `protobuf:"bytes,7,opt,name=clientid_google,json=clientidGoogle,proto3" json:"clientid_google,omitempty"`
	ClientID       string `protobuf:"bytes,8,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
}

func (x *StructRequest1) Reset() {
	*x = StructRequest1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructRequest1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructRequest1) ProtoMessage() {}

func (x *StructRequest1) ProtoReflect() protoreflect.Message {
	mi := &file_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructRequest1.ProtoReflect.Descriptor instead.
func (*StructRequest1) Descriptor() ([]byte, []int) {
	return file_stream_proto_rawDescGZIP(), []int{4}
}

func (x *StructRequest1) GetModification() string {
	if x != nil {
		return x.Modification
	}
	return ""
}

func (x *StructRequest1) GetModFamily() string {
	if x != nil {
		return x.ModFamily
	}
	return ""
}

func (x *StructRequest1) GetModBodyType() string {
	if x != nil {
		return x.ModBodyType
	}
	return ""
}

func (x *StructRequest1) GetModEngine() string {
	if x != nil {
		return x.ModEngine
	}
	return ""
}

func (x *StructRequest1) GetModBase() string {
	if x != nil {
		return x.ModBase
	}
	return ""
}

func (x *StructRequest1) GetUrlMod() string {
	if x != nil {
		return x.UrlMod
	}
	return ""
}

func (x *StructRequest1) GetClientidGoogle() string {
	if x != nil {
		return x.ClientidGoogle
	}
	return ""
}

func (x *StructRequest1) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

var File_stream_proto protoreflect.FileDescriptor

var file_stream_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x31, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x08, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x33, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x26, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x22,
	0x8f, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x5f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f,
	0x64, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x72, 0x6c, 0x4d, 0x6f, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x32, 0x9b, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2f, 0x0a, 0x07,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x31, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x2f, 0x0a,
	0x07, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x2f,
	0x0a, 0x07, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x33, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x33, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42,
	0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65,
	0x62, 0x64, 0x65, 0x76, 0x6f, 0x6c, 0x65, 0x67, 0x6b, 0x75, 0x70, 0x72, 0x69, 0x61, 0x6e, 0x6f,
	0x76, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stream_proto_rawDescOnce sync.Once
	file_stream_proto_rawDescData = file_stream_proto_rawDesc
)

func file_stream_proto_rawDescGZIP() []byte {
	file_stream_proto_rawDescOnce.Do(func() {
		file_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_stream_proto_rawDescData)
	})
	return file_stream_proto_rawDescData
}

var file_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_stream_proto_goTypes = []interface{}{
	(*Request1)(nil),       // 0: proto.Request1
	(*Request2)(nil),       // 1: proto.Request2
	(*Request3)(nil),       // 2: proto.Request3
	(*Response)(nil),       // 3: proto.Response
	(*StructRequest1)(nil), // 4: proto.StructRequest1
}
var file_stream_proto_depIdxs = []int32{
	0, // 0: proto.Stream.Stream1:input_type -> proto.Request1
	1, // 1: proto.Stream.Stream2:input_type -> proto.Request2
	2, // 2: proto.Stream.Stream3:input_type -> proto.Request3
	3, // 3: proto.Stream.Stream1:output_type -> proto.Response
	3, // 4: proto.Stream.Stream2:output_type -> proto.Response
	3, // 5: proto.Stream.Stream3:output_type -> proto.Response
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_proto_init() }
func file_stream_proto_init() {
	if File_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructRequest1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_proto_goTypes,
		DependencyIndexes: file_stream_proto_depIdxs,
		MessageInfos:      file_stream_proto_msgTypes,
	}.Build()
	File_stream_proto = out.File
	file_stream_proto_rawDesc = nil
	file_stream_proto_goTypes = nil
	file_stream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	Stream1(ctx context.Context, opts ...grpc.CallOption) (Stream_Stream1Client, error)
	Stream2(ctx context.Context, opts ...grpc.CallOption) (Stream_Stream2Client, error)
	Stream3(ctx context.Context, opts ...grpc.CallOption) (Stream_Stream3Client, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Stream1(ctx context.Context, opts ...grpc.CallOption) (Stream_Stream1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/proto.Stream/Stream1", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamStream1Client{stream}
	return x, nil
}

type Stream_Stream1Client interface {
	Send(*Request1) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type streamStream1Client struct {
	grpc.ClientStream
}

func (x *streamStream1Client) Send(m *Request1) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamStream1Client) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Stream2(ctx context.Context, opts ...grpc.CallOption) (Stream_Stream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[1], "/proto.Stream/Stream2", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamStream2Client{stream}
	return x, nil
}

type Stream_Stream2Client interface {
	Send(*Request2) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type streamStream2Client struct {
	grpc.ClientStream
}

func (x *streamStream2Client) Send(m *Request2) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamStream2Client) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Stream3(ctx context.Context, opts ...grpc.CallOption) (Stream_Stream3Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[2], "/proto.Stream/Stream3", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamStream3Client{stream}
	return x, nil
}

type Stream_Stream3Client interface {
	Send(*Request3) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type streamStream3Client struct {
	grpc.ClientStream
}

func (x *streamStream3Client) Send(m *Request3) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamStream3Client) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	Stream1(Stream_Stream1Server) error
	Stream2(Stream_Stream2Server) error
	Stream3(Stream_Stream3Server) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) Stream1(Stream_Stream1Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream1 not implemented")
}
func (*UnimplementedStreamServer) Stream2(Stream_Stream2Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream2 not implemented")
}
func (*UnimplementedStreamServer) Stream3(Stream_Stream3Server) error {
	return status.Errorf(codes.Unimplemented, "method Stream3 not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_Stream1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Stream1(&streamStream1Server{stream})
}

type Stream_Stream1Server interface {
	SendAndClose(*Response) error
	Recv() (*Request1, error)
	grpc.ServerStream
}

type streamStream1Server struct {
	grpc.ServerStream
}

func (x *streamStream1Server) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamStream1Server) Recv() (*Request1, error) {
	m := new(Request1)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_Stream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Stream2(&streamStream2Server{stream})
}

type Stream_Stream2Server interface {
	SendAndClose(*Response) error
	Recv() (*Request2, error)
	grpc.ServerStream
}

type streamStream2Server struct {
	grpc.ServerStream
}

func (x *streamStream2Server) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamStream2Server) Recv() (*Request2, error) {
	m := new(Request2)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_Stream3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).Stream3(&streamStream3Server{stream})
}

type Stream_Stream3Server interface {
	SendAndClose(*Response) error
	Recv() (*Request3, error)
	grpc.ServerStream
}

type streamStream3Server struct {
	grpc.ServerStream
}

func (x *streamStream3Server) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamStream3Server) Recv() (*Request3, error) {
	m := new(Request3)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream1",
			Handler:       _Stream_Stream1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream2",
			Handler:       _Stream_Stream2_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream3",
			Handler:       _Stream_Stream3_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
